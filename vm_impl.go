// Code generated by go-bindata.
// sources:
// run_test.go
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _run_testGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x55\x4d\x6f\xe3\x36\x10\x3d\x8b\xbf\x62\xba\x28\x02\x2b\x76\xb2\x4e\x50\xf4\xe0\x56\xa7\x45\xbb\xd8\xd6\xbb\x0b\x34\x41\x2f\x82\x50\xd0\xf4\x58\x62\x22\x91\x84\x44\x25\x4d\x03\xff\xf7\xce\x90\xb2\xac\x18\x4d\xbf\xb0\x01\x92\x88\x33\x6f\x3e\xf8\xf8\x38\x74\x52\xdd\xcb\x12\xa1\x91\xda\x08\xf1\xf6\x6d\x69\x57\x25\x1a\x6c\xa5\x47\x28\xed\xc5\x46\x9b\xad\xf4\x12\x2e\x2c\x3c\x34\xbf\xe9\xc6\xd5\x97\xa5\x85\xaf\xdf\x7f\xfe\xf1\xc3\xfa\x07\x82\xc3\x35\x9c\x83\xaf\x10\x4c\xdf\x6c\xb0\x05\xbb\x03\x25\x9d\xef\x5b\x8a\x6e\x6d\xef\x3a\xd0\x06\x24\xb4\x58\xe2\xef\x42\x59\xd3\x79\xf8\xd4\x37\xef\xa3\x2b\xe3\xef\x77\x11\xde\x01\xe5\x12\xc2\x3f\x39\x84\xdb\xaa\x45\xb9\x85\xce\xb7\xbd\xf2\xf0\x2c\x12\xa7\x20\xfc\x68\xe3\xbf\xfd\x46\x24\x9d\x7c\xc0\x5f\xb0\x84\xf3\x7c\x12\x5f\x90\x53\xec\x85\xd8\xf5\x46\x11\xb0\xc3\xd6\xff\x8c\x4f\xb3\x5a\x53\xc9\xbc\x88\x29\x17\xd0\xa1\xa7\xad\xba\x3c\x64\x2a\x36\xd6\xd6\x0b\xf0\x43\xc1\x14\x66\x47\xe0\x4b\x50\xca\x5d\xe8\x1d\x87\xe7\xfe\xd2\xa9\x82\xd7\x49\x8b\x54\xd9\x00\x97\x08\x99\x45\xb2\x07\xac\x3b\x0c\xce\x23\x34\x03\xda\x08\x1e\xf1\xd2\x39\x34\xdb\x59\x0c\xf3\xe9\x21\x74\x6c\xfe\xb6\xb2\x8d\xeb\xac\xf9\xf5\xe3\x8c\xc8\xcb\x8b\x0f\x86\x81\xda\xb8\xde\x33\x27\xda\x94\xd4\x69\x6c\x3d\x2f\x0e\x06\x66\xa9\xb5\xe5\x1a\x4d\xe9\x2b\x58\x65\x50\xa3\xa1\xf0\x54\x24\xea\x86\xf6\x4c\x86\x46\xde\xe3\xec\x64\x5b\x22\x31\x7f\xeb\x55\x6b\xa6\xef\xe0\x3e\xb2\xb3\x5c\xc0\xb1\x1a\x67\xf9\x97\xb8\x98\x2f\x3b\x50\x10\x96\x8b\x81\xfe\x67\x02\x9f\x9d\x9e\xe8\xf3\x7e\x3f\x6c\x21\x5f\x1e\x99\x94\x25\xa9\x95\xcb\x85\xa5\x48\x58\x3e\xc7\xe2\x91\x92\x50\x7c\xd4\x5a\x4a\xa8\x9d\x6d\x41\x2d\x40\x55\x2d\x83\x5b\x69\x48\xf6\x91\x55\x22\xcf\x5b\xb7\xa2\x23\x62\x8c\x66\xf7\xf2\x3b\xfa\xff\x7d\x60\x31\x74\x99\xd2\x7a\x3e\x0f\x27\x9b\xf8\x98\x21\xd8\x73\x5d\xb0\x49\x9b\xb8\x7f\x6d\x72\xf2\xf2\xb1\xb3\xb5\x7b\xd4\x5e\x55\xac\x46\x7f\xf9\xd9\xc5\x60\x25\x49\x20\xef\x2a\xd9\x72\xb9\x84\x45\x15\xdc\x6c\x81\xaf\xb2\xd0\x5d\xc0\x25\xc9\x86\x58\xb9\x0f\x9f\xfb\xf0\xd7\x44\xb6\xc2\x89\x65\x13\x89\x4f\xec\x23\x97\xb1\x09\x98\xc3\x15\x49\x8c\xbe\x87\x2b\xc3\x64\x0e\x2d\xfc\xd4\x37\x2e\xb6\x30\x9c\x82\x3a\xcd\x3b\xb1\x8f\x79\x43\xaf\x6b\xb9\xc1\xfa\xd5\xc4\x37\xae\xd6\xfe\x4b\x67\xfe\x9f\xa9\xae\x5f\x6d\x92\x2c\xb1\xc7\x89\x3f\x9f\xf4\xc0\x62\x53\xff\xb9\xf2\x3f\xd3\xfe\x51\x92\x22\x62\x65\xd6\xda\xdd\xa0\xb5\x3b\xd2\xda\x28\x56\x5a\x1e\xa4\x96\x04\x6d\x8f\x17\x86\x16\xc3\x24\xc8\xa7\x7d\x5f\x9f\xdf\x15\xab\x13\xc3\xfc\xaa\x28\xd2\x89\x7a\x86\xe1\xc3\x37\x66\x41\xf3\xb8\x1b\x3b\xfa\x64\x07\x1d\x38\x69\xb4\x9a\xbd\xa1\x35\x74\x95\xed\xeb\x2d\x6c\x10\xac\xf3\xba\xd1\x7f\x68\xdc\x82\xed\xfd\x9b\x90\x71\x8b\x3b\xd9\xd7\xfe\x45\x94\x36\x0f\xb2\xd6\x04\x72\xca\x6e\x31\xe2\xb8\x30\xff\xfa\xc6\xad\xc7\x0b\x23\x4e\x19\x9d\xc8\x57\x0c\x22\xe7\x8b\x4e\x31\xf9\x6a\xc9\xd7\x68\x10\xfc\x5f\x4e\x28\x11\x6e\x90\x82\xec\x30\xf0\x88\x9a\xf4\xe2\x0a\xce\xce\x20\x0e\x89\xc0\x22\xbd\x53\x8f\xf4\x44\x21\x6d\xc2\x5b\x70\xd8\x12\xf5\x4d\x78\xb6\x6a\x49\xd5\xb4\xe7\xf7\x4e\x5b\x62\xe7\x51\x2b\xa2\x87\x40\xaa\x46\xba\x90\xd2\x3c\x11\x57\xfc\x36\xd2\x44\x19\x32\x35\x7c\x82\xb4\xcf\x21\xa6\xe3\xd4\x4a\x1a\x1a\xcd\xba\xae\x41\x2a\x85\x5d\x20\x37\xd6\xcf\x60\x27\xe9\x49\x60\x43\x69\x29\x2f\xcd\x99\xc8\xca\x3e\xcc\xad\x70\x26\x01\x41\x0c\xe8\x9a\xde\x80\x3f\x03\x00\x00\xff\xff\x43\xf3\xb8\x44\x91\x07\x00\x00")

func run_testGoBytes() ([]byte, error) {
	return bindataRead(
		_run_testGo,
		"run_test.go",
	)
}

func run_testGo() (*asset, error) {
	bytes, err := run_testGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "run_test.go", size: 1937, mode: os.FileMode(420), modTime: time.Unix(1439110410, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"run_test.go": run_testGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"run_test.go": &bintree{run_testGo, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

